#include <iostream>
#include <fstream>
#include <unordered_set>
#include <cctype>
#include <string>
using namespace std;


unordered_set<string> keywords = {
    "auto", "break", "case", "char", "const", "continue", "default",
    "do", "double", "else", "enum", "extern", "float", "for", "goto",
    "if", "int", "long", "register", "return", "short", "signed",
    "sizeof", "static", "struct", "switch", "typedef", "union",
    "unsigned", "void", "volatile", "while", "class", "public",
    "private", "protected", "template", "typename", "using", "namespace"
};


unordered_set<string> operators = {
    "+", "-", "*", "/", "%", "++", "--", "==", "!=", ">", "<", ">=", "<=",
    "=", "+=", "-=", "*=", "/=", "%=", "&&", "||", "!", "&", "|", "^", "~", "<<", ">>"
};


unordered_set<char> symbols = {
    '(', ')', '{', '}', '[', ']', ';', ',', '.', ':'
};


void classifyToken(const string& token) {
    if (token.empty()) return;


    if (keywords.find(token) != keywords.end()) {
        cout << "[Keyword]          : " << token << endl;
        return;
    }


    if (operators.find(token) != operators.end()) {
        cout << "[Operator]         : " << token << endl;
        return;
    }


    if (token.length() == 1 && symbols.find(token[0]) != symbols.end()) {
        cout << "[Symbol]           : " << token << endl;
        return;
    }


    int dotCount = 0;
    int i = 0;
    while (i < token.length()) {
        if (isdigit(token[i])) {
            i++;
        } else if (token[i] == '.') {
            dotCount++;
            if (dotCount > 1) break;
            i++;
        } else {
            break;
        }
    }
    if (i == token.length()) {
        cout << "[Number]           : " << token << endl;
        return;
    }


    if ((token[0] >= 'A' && token[0] <= 'Z') || (token[0] >= 'a' && token[0] <= 'z') || token[0] == '_') {
        bool valid = true;
        for (int j = 1; j < token.length(); j++) {
            if (!((token[j] >= 'A' && token[j] <= 'Z') || (token[j] >= 'a' && token[j] <= 'z') || (token[j] >= '0' && token[j] <= '9') || token[j] == '_')) {
                valid = false;
                break;
            }
        }
        if (valid) {
            cout << "[Valid Identifier] : " << token << endl;
        } else {
            cout << "[Invalid Identifier]: " << token << endl;
        }
    } else {
        cout << "[Invalid Identifier]: " << token << endl;
    }
}


void tokenizeLine(const string& line) {
    string token;
    for (size_t i = 0; i < line.length(); i++) {
        char ch = line[i];


        if (isspace(ch) || symbols.find(ch) != symbols.end() || ispunct(ch)) {
            if (!token.empty()) {
                classifyToken(token);
                token.clear();
            }


            string op(1, ch);
            if (i + 1 < line.length()) {
                string twoCharOp = op + line[i + 1];
                if (operators.find(twoCharOp) != operators.end()) {
                    classifyToken(twoCharOp);
                    i++;
                    continue;
                }
            }


            if (operators.find(op) != operators.end() || symbols.find(ch) != symbols.end()) {
                classifyToken(op);
            }
        } else {
            token += ch;
        }
    }


    if (!token.empty()) {
        classifyToken(token);
    }
}

int main() {
    ifstream file("compilerlab3.txt");
    if (!file) {
        cout << "Error opening file." << endl;
        return 1;
    }

    cout << "Tokenizing...\n\n";

    string line;
    while (getline(file, line)) {
        tokenizeLine(line);
    }

    file.close();
    return 0;
}
